module unidadeDeControle(
    input wire CLK,
    input wire CLR,
    input wire [3:0] opcode,

    output reg Cp, Ep, Ej,
    output reg Eu, Add, Sub, AndOp, OrOp, XorOp, NotOp,
    output reg La, Ea, Lb,
    output reg Lm, CE, L1, Ei,
    output reg L0
);

    reg [2:0] estado;

    always @(posedge CLK or posedge CLR) begin
        if (CLR)
            estado <= 0;
        else
            estado <= estado + 1;
    end

    always @(*) begin
        // Zera todos os sinais por padrão
        Cp = 0; Ep = 0; Ej = 0;
        Eu = 0; Add = 0; Sub = 0; AndOp = 0; OrOp = 0; XorOp = 0; NotOp = 0;
        La = 0; Ea = 0; Lb = 0;
        Lm = 0; CE = 0; L1 = 0; Ei = 0;
        L0 = 0;

        case (estado)
            3'd0: begin
                // Carrega endereço do MAR
                Ep = 1;
                Lm = 1;
            end
            3'd1: begin
                // Ativa leitura da memória
                CE = 1;
            end
            3'd2: begin
                // Carrega instrução no RI
                L1 = 1;
                Ei = 1;
            end
            3'd3: begin
                // Carrega dado no registrador B
                Cp = 1;
                Ep = 1;
                Lm = 1;
            end
            3'd4: begin
                CE = 1;
                Lb = 1;
            end
            3'd5: begin
                // Executa a operação baseada no opcode
                case (opcode)
                    4'b0100: begin Add = 1; Eu = 1; La = 1; end
                    4'b0101: begin Sub = 1; Eu = 1; La = 1; end
                    4'b0110: begin AndOp = 1; Eu = 1; La = 1; end
                    4'b0111: begin OrOp = 1; Eu = 1; La = 1; end
                    4'b1000: begin XorOp = 1; Eu = 1; La = 1; end
                    4'b1001: begin NotOp = 1; Eu = 1; La = 1; end
                    default: begin end
                endcase
            end
        endcase
    end
endmodule
