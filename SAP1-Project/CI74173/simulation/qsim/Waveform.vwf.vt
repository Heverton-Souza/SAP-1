// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/20/2025 00:08:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CI74173
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CI74173_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
reg MR;
reg NE1;
reg NE2;
reg NOE1;
reg NOE2;
reg O0;
reg O1;
reg O2;
reg O3;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire Q3;

// assign statements (if any)                          
CI74173 i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.MR(MR),
	.NE1(NE1),
	.NE2(NE2),
	.NOE1(NOE1),
	.NOE2(NOE2),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3)
);
initial 
begin 
#1000000 $finish;
end 

// CP
always
begin
	CP = 1'b0;
	CP = #10000 1'b1;
	#10000;
end 

// NE1
initial
begin
	NE1 = 1'b0;
end 

// NE2
initial
begin
	NE2 = 1'b0;
end 

// O0
initial
begin
	O0 = 1'b1;
end 

// O1
initial
begin
	O1 = 1'b1;
end 

// O2
initial
begin
	O2 = 1'b1;
end 

// O3
initial
begin
	O3 = 1'b1;
end 

// NOE1
initial
begin
	NOE1 = 1'b0;
end 

// NOE2
initial
begin
	NOE2 = 1'b0;
end 

// MR
initial
begin
	MR = 1'b0;
end 
endmodule

