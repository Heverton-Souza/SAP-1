// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2025 15:09:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CI74189RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CI74189RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg CS;
reg D0;
reg D1;
reg D2;
reg D3;
reg RnotW;
// wires                                               
wire O0;
wire O1;
wire O2;
wire O3;

// assign statements (if any)                          
CI74189RAM i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.CS(CS),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.O0(O0),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.RnotW(RnotW)
);
initial 
begin 
#1000000 $finish;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #80000 1'b1;
	# 80000;
	repeat(5)
	begin
		A3 = 1'b0;
		A3 = #80000 1'b1;
		# 80000;
	end
	A3 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #40000 1'b1;
	# 40000;
	repeat(11)
	begin
		A2 = 1'b0;
		A2 = #40000 1'b1;
		# 40000;
	end
	A2 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #20000 1'b1;
	# 20000;
	repeat(23)
	begin
		A1 = 1'b0;
		A1 = #20000 1'b1;
		# 20000;
	end
	A1 = 1'b0;
	A1 = #20000 1'b1;
end 

// A0
initial
begin
	A0 = 1'b0;
	A0 = #10000 1'b1;
	# 10000;
	repeat(48)
	begin
		A0 = 1'b0;
		A0 = #10000 1'b1;
		# 10000;
	end
	A0 = 1'b0;
	A0 = #10000 1'b1;
end 

// CS
initial
begin
	CS = 1'b1;
	CS = #3600 1'b0;
	# 3600;
	repeat(21)
	begin
		CS = 1'b1;
		CS = #3600 1'b0;
		# 3600;
	end
	CS = 1'b1;
	CS = #1600 1'b0;
	CS = #260000 1'b1;
	CS = #1200 1'b0;
	# 3600;
	repeat(79)
	begin
		CS = 1'b1;
		CS = #3600 1'b0;
		# 3600;
	end
	CS = 1'b1;
	CS = #3600 1'b0;
end 

// D3
initial
begin
	repeat(6)
	begin
		D3 = 1'b0;
		D3 = #80000 1'b1;
		# 80000;
	end
	D3 = 1'b0;
end 

// D2
initial
begin
	repeat(12)
	begin
		D2 = 1'b0;
		D2 = #40000 1'b1;
		# 40000;
	end
	D2 = 1'b0;
end 

// D1
always
begin
	D1 = 1'b0;
	D1 = #20000 1'b1;
	#20000;
end 

// D0
always
begin
	D0 = 1'b0;
	D0 = #10000 1'b1;
	#10000;
end 

// RnotW
initial
begin
	RnotW = 1'b1;
	RnotW = #160000 1'b0;
end 
endmodule

