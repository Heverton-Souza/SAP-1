// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/20/2025 00:46:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SAP1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SAP1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg Etapa_unica;
reg LeituraEscrita;
reg Limpar_Iniciar;
reg Manual_Automatico;
reg RUN_PROG;
reg Sinal_clock;
// wires                                               
wire Cp;
wire Ea;
wire Ep;
wire Eu;
wire HLT;
wire LED0;
wire LED1;
wire LED2;
wire LED3;
wire LED4;
wire LED5;
wire LED6;
wire LED7;
wire MEM4;
wire MEM5;
wire MEM6;
wire MEM7;
wire NCE;
wire NEi;
wire NHLT;
wire NL0;
wire NL1;
wire NLa;
wire NLb;
wire NLm;
wire opcode0;
wire opcode1;
wire opcode2;
wire opcode3;
wire Su;
wire w0;
wire w1;
wire w2;
wire w3;
wire w4;
wire w5;
wire w6;
wire w7;

// assign statements (if any)                          
SAP1 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.Cp(Cp),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.Ea(Ea),
	.Ep(Ep),
	.Etapa_unica(Etapa_unica),
	.Eu(Eu),
	.HLT(HLT),
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.LED5(LED5),
	.LED6(LED6),
	.LED7(LED7),
	.LeituraEscrita(LeituraEscrita),
	.Limpar_Iniciar(Limpar_Iniciar),
	.Manual_Automatico(Manual_Automatico),
	.MEM4(MEM4),
	.MEM5(MEM5),
	.MEM6(MEM6),
	.MEM7(MEM7),
	.NCE(NCE),
	.NEi(NEi),
	.NHLT(NHLT),
	.NL0(NL0),
	.NL1(NL1),
	.NLa(NLa),
	.NLb(NLb),
	.NLm(NLm),
	.opcode0(opcode0),
	.opcode1(opcode1),
	.opcode2(opcode2),
	.opcode3(opcode3),
	.RUN_PROG(RUN_PROG),
	.Sinal_clock(Sinal_clock),
	.Su(Su),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.w4(w4),
	.w5(w5),
	.w6(w6),
	.w7(w7)
);
initial 
begin 
#1000000 $finish;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #90000 1'b1;
	A3 = #80000 1'b0;
	A3 = #100000 1'b1;
	A3 = #80000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #50000 1'b1;
	A2 = #40000 1'b0;
	A2 = #40000 1'b1;
	A2 = #40000 1'b0;
	A2 = #60000 1'b1;
	A2 = #40000 1'b0;
	A2 = #40000 1'b1;
	A2 = #40000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #30000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
	A1 = #40000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
	A1 = #20000 1'b1;
	A1 = #20000 1'b0;
end 

// A0
initial
begin
	A0 = 1'b0;
	A0 = #20000 1'b1;
	A0 = #10000 1'b0;
	# 10000;
	repeat(5)
	begin
		A0 = 1'b1;
		A0 = #10000 1'b0;
		# 10000;
	end
	A0 = 1'b1;
	A0 = #10000 1'b0;
	A0 = #10000 1'b1;
	A0 = #10000 1'b0;
	A0 = #30000 1'b1;
	# 10000;
	repeat(4)
	begin
		A0 = 1'b0;
		A0 = #10000 1'b1;
		# 10000;
	end
	A0 = 1'b0;
	# 10000;
	repeat(2)
	begin
		A0 = 1'b1;
		A0 = #10000 1'b0;
		# 10000;
	end
	A0 = 1'b1;
	A0 = #10000 1'b0;
end 

// D7
initial
begin
	D7 = 1'b0;
	D7 = #30000 1'b1;
	D7 = #20000 1'b0;
end 

// D6
initial
begin
	D6 = 1'b0;
	D6 = #30000 1'b1;
	D6 = #20000 1'b0;
end 

// D5
initial
begin
	D5 = 1'b0;
	D5 = #30000 1'b1;
	D5 = #20000 1'b0;
end 

// D4
initial
begin
	D4 = 1'b0;
	D4 = #20000 1'b1;
	D4 = #10000 1'b0;
	D4 = #10000 1'b1;
	D4 = #10000 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
	D3 = #10000 1'b1;
	D3 = #20000 1'b0;
end 

// D2
initial
begin
	D2 = 1'b0;
end 

// D1
initial
begin
	D1 = 1'b0;
	D1 = #10000 1'b1;
	D1 = #20000 1'b0;
	D1 = #90000 1'b1;
	D1 = #10000 1'b0;
end 

// D0
initial
begin
	D0 = 1'b0;
	D0 = #20000 1'b1;
	D0 = #10000 1'b0;
	D0 = #80000 1'b1;
	D0 = #10000 1'b0;
end 

// Etapa_unica
initial
begin
	Etapa_unica = 1'b0;
end 

// LeituraEscrita
initial
begin
	LeituraEscrita = 1'b0;
	LeituraEscrita = #170000 1'b1;
end 

// Limpar_Iniciar
initial
begin
	Limpar_Iniciar = 1'b0;
end 

// Manual_Automatico
initial
begin
	Manual_Automatico = 1'b0;
end 

// RUN_PROG
initial
begin
	RUN_PROG = 1'b0;
	RUN_PROG = #170000 1'b1;
end 

// Sinal_clock
initial
begin
	repeat(17)
	begin
		Sinal_clock = 1'b0;
		Sinal_clock = #5000 1'b1;
		# 5000;
	end
	Sinal_clock = 1'b0;
	Sinal_clock = #25000 1'b1;
	# 5000;
	repeat(80)
	begin
		Sinal_clock = 1'b0;
		Sinal_clock = #5000 1'b1;
		# 5000;
	end
end 
endmodule

